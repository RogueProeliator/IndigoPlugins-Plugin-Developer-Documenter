<?xml version="1.0"?>
<!--
	Plugin Developer Documenter by RogueProeliator <adam.d.ashe@gmail.com>
	
	Actions define a way to interact with devices (or the plugin itself) via Indigo. They may be defined with or
	without a configuration screen; the ConfigUI supports all standard elements as found in the Indigo Plugin
	Developer's Guide:
		http://wiki.indigodomo.com/doku.php?id=indigo_6_documentation:plugin_guide
-->
<Actions>
	<SupportURL>http://forums.indigodomo.com/viewforum.php?f=59</SupportURL>
	<Action id="incrementDeviceState" deviceFilter="self" uiPath="DeviceActions">
		<Name>Add to Counter</Name>
		<CallbackMethod>changeCustomDeviceCounterState</CallbackMethod>
	</Action>
	<Action id="decrementDeviceState" deviceFilter="self" uiPath="DeviceActions">
		<Name>Subtract from Counter</Name>
		<CallbackMethod>changeCustomDeviceCounterState</CallbackMethod>
	</Action>
	<Action id="separator1" uiPath="DeviceActions" />
	<Action id="setCustomDeviceState" deviceFilter="self" uiPath="DeviceActions">
		<Name>Set Device State</Name>
		<CallbackMethod>setCustomDeviceState</CallbackMethod>
		<ConfigUI>
			<Field id="instructions" type="label" fontSize="small">
				<Label>This action will allow setting the value shown in the state column. The textfield is required; leave blank to show the validation routines.</Label>
			</Field>
			<Field id="newStateValue" type="textfield">
				<Label>Value:</Label>
			</Field>
			<Field id="addSymbolToState" type="checkbox">
				<Label>Add Symbol:</Label>
			</Field>
			<Field id="addSymbolDescr" type="label" alignWithControl="true" fontSize="small">
				<Label>If checked the state will be appended with a degree symbol to show usage of the uiState</Label>
			</Field>
		</ConfigUI>
	</Action>
	<Action id="setMultipleDeviceStates" deviceFilter="self" uiPath="DeviceActions">
		<Name>Set Multiple Device States</Name>
		<CallbackMethod>setMultipleDeviceStates</CallbackMethod>
		<ConfigUI>
			<Field id="instructions" type="label" fontSize="small">
				<Label>This action will set both device states in one call in the handler. This is the preferred way to update a device as it is more efficient than updating the states individually.</Label>
			</Field>
			<Field id="newStringState" type="textfield">
				<Label>State 1:</Label>
			</Field>
			<Field id="newNumberState" type="menu">
				<Label>State 2:</Label>
				<List>
					<Option value="option1">1</Option>
					<Option value="option2">2</Option>
					<Option value="option3">3</Option>
				</List>
			</Field>
		</ConfigUI>
	</Action>

	<!-- 
		Note that the following action is hidden from the user; it is utilized in this manner so that a script
		or another plugin could call the action as a pseudo-API for the plugin. In this case it simply
		returns the inputNumber value * 2. An actual plugin could return JSON, a calculated value, etc.
	-->
	<Action id="hiddenApiCallAction" deviceFilter="self" uiPath="hidden">
		<Name>Hidden Action - Used for Pseudo-API Implementation</Name>
		<CallbackMethod>executeHiddenApiAction</CallbackMethod>
		<ConfigUI>
			<Field id="inputNumber" type="textfield" />
		</ConfigUI>
	</Action>
</Actions>
